(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    103151,       2006]
NotebookOptionsPosition[    102825,       1990]
NotebookOutlinePosition[    103173,       2005]
CellTagsIndexPosition[    103130,       2002]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "30", ",", "Tanh", ",", "3", ",", "Tanh", ",", "3", ",", 
       "LogisticSigmoid"}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"nets", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"NetInitialize", "[", 
      RowBox[{"net", ",", 
       RowBox[{"Method", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<Random\>\"", ",", 
          RowBox[{"\"\<Weights\>\"", "\[Rule]", "3"}], ",", 
          RowBox[{"\"\<Biases\>\"", "\[Rule]", "2"}]}], "}"}]}]}], "]"}], ",",
      "25"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"row", "=", 
   RowBox[{"Range", "[", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "2", ",", "0.04"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"coords", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{"row", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"plot", "[", "net_", "]"}], ":=", 
  RowBox[{"Image", "[", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"net", "[", "coords", "]"}], ",", 
     RowBox[{"Length", "[", "row", "]"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"img", "=", 
  RowBox[{"ImageResize", "[", 
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"plot", "[", "net", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"net", ",", "nets"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"48", ",", "48"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"colors", "=", 
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0., 0., 0.], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0., 0., 0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0., 0., 0.]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0., 0., 0.]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0., 0., 0.],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0., 0., 0.6666666666666666], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0., 0., 0.4444444444444444],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0., 0., 0.6666666666666666]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0., 0., 0.6666666666666666]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0., 0., 0.6666666666666666],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0., 0.6666666666666666, 0.00392156862745098], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0., 0.4444444444444444, 0.0026143790849673205`],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0., 0.6666666666666666, 0.00392156862745098]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0., 0.6666666666666666, 0.00392156862745098]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0., 0.6666666666666666, 0.00392156862745098],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0., 0.6666666666666666, 0.6666666666666666], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0., 0.4444444444444444, 0.4444444444444444],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0., 0.6666666666666666, 0.6666666666666666]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0., 0.6666666666666666, 0.6666666666666666]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0., 0.6666666666666666, 0.6666666666666666],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.6666666666666666, 0., 0.], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0.4444444444444444, 0., 0.],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.6666666666666666, 0., 0.]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.6666666666666666, 0., 0.]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.6666666666666666, 0., 0.],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.6666666666666666, 0., 0.6627450980392157], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[0.4444444444444444, 0., 0.4418300653594771],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.6666666666666666, 0., 0.6627450980392157]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.6666666666666666, 0., 0.6627450980392157]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.6666666666666666, 0., 0.6627450980392157],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[1., 0.6666666666666666, 0.00392156862745098], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.6666666666666667, 0.4444444444444444, 0.0026143790849673205`],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[1., 0.6666666666666666, 0.00392156862745098]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[1., 0.6666666666666666, 0.00392156862745098]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[1., 0.6666666666666666, 0.00392156862745098],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[
            0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          FrameStyle->RGBColor[
           0.4444444444444444, 0.4444444444444444, 0.4444444444444444],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.6666666666666666, 0.6666666666666666, \
0.6666666666666666]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[
             0.6666666666666666, 0.6666666666666666, 0.6666666666666666]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[
            0.3333333333333333, 0.3333333333333333, 0.3333333333333333], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.2222222222222222, 0.2222222222222222, 0.2222222222222222],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.3333333333333333, 0.3333333333333333, \
0.3333333333333333]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[
             0.3333333333333333, 0.3333333333333333, 0.3333333333333333]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.3333333333333333, 0.3333333333333333, 0.3333333333333333],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.32941176470588235`, 0.3333333333333333, 1.], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.2196078431372549, 0.2222222222222222, 0.6666666666666667],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.32941176470588235, 0.3333333333333333, 1.]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.32941176470588235`, 0.3333333333333333, 1.]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.32941176470588235`, 0.3333333333333333, 1.],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.3333333333333333, 1., 0.33725490196078434`], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.2222222222222222, 0.6666666666666667, 0.22483660130718958`],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.3333333333333333, 1., 0.33725490196078434]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.3333333333333333, 1., 0.33725490196078434`]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.3333333333333333, 1., 0.33725490196078434`],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[0.3333333333333333, 1., 1.], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.2222222222222222, 0.6666666666666667, 0.6666666666666667],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[0.3333333333333333, 1., 1.]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[0.3333333333333333, 1., 1.]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[0.3333333333333333, 1., 1.],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[1., 0.3333333333333333, 0.3333333333333333], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.6666666666666667, 0.2222222222222222, 0.2222222222222222],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[1., 0.3333333333333333, 0.3333333333333333]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[1., 0.3333333333333333, 0.3333333333333333]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[1., 0.3333333333333333, 0.3333333333333333],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[1., 0.33725490196078434`, 0.6078431372549019], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.6666666666666667, 0.22483660130718958`, 0.40522875816993464`],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[1., 0.33725490196078434, 0.6078431372549019]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[1., 0.33725490196078434`, 0.6078431372549019]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[1., 0.33725490196078434`, 0.6078431372549019],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[1., 1., 0.3333333333333333], 
            RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.6666666666666667, 0.6666666666666667, 0.2222222222222222],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[1., 1., 0.3333333333333333]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = 
            RGBColor[1., 1., 0.3333333333333333]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[1., 1., 0.3333333333333333],
       Editable->False,
       Selectable->False], ",", 
      InterpretationBox[
       ButtonBox[
        TooltipBox[
         GraphicsBox[{
           {GrayLevel[0], RectangleBox[{0, 0}]}, 
           {GrayLevel[0], RectangleBox[{1, -1}]}, 
           {RGBColor[1., 1., 1.], RectangleBox[{0, -1}, {2, 1}]}},
          AspectRatio->1,
          Frame->True,
          
          FrameStyle->RGBColor[
           0.6666666666666667, 0.6666666666666667, 0.6666666666666667],
          FrameTicks->None,
          
          ImageSize->
           Dynamic[{
            Automatic, 1.35 CurrentValue["FontCapHeight"]/
             AbsoluteCurrentValue[Magnification]}],
          PlotRangePadding->None],
         "RGBColor[1., 1., 1.]"],
        Appearance->None,
        BaseStyle->{},
        BaselinePosition->Baseline,
        ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
          If[
           Not[
            AbsoluteCurrentValue["Deployed"]], 
           SelectionMove[Typeset`box$, All, Expression]; 
           FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
           FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1., 1., 1.]; 
           FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
           MathLink`CallFrontEnd[
             FrontEnd`AttachCell[Typeset`box$, 
              FrontEndResource["RGBColorValueSelector"], {
              0, {Left, Bottom}}, {Left, Top}, 
              "ClosingActions" -> {
               "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
        DefaultBaseStyle->{},
        Evaluator->Automatic,
        Method->"Preemptive"],
       RGBColor[1., 1., 1.],
       Editable->False,
       Selectable->False]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"ReplaceImageValue", "[", 
       RowBox[{"img", ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"i", "-", "1"}], ",", 
           RowBox[{"j", "-", "1"}]}], "}"}], "\[Rule]", 
         RowBox[{"Part", "[", 
          RowBox[{
           RowBox[{"Nearest", "[", 
            RowBox[{"colors", ",", 
             RowBox[{"ImageValue", "[", 
              RowBox[{"img", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"i", "-", "1"}], ",", 
                 RowBox[{"j", "-", "1"}]}], "}"}], ",", "\"\<Byte\>\""}], 
              "]"}]}], "]"}], ",", "1"}], "]"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "49"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "49"}], "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "img", "]"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"imgcolors", "=", 
   RowBox[{"DominantColors", "[", 
    RowBox[{"img", ",", "256"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"ColorReplace", "[", 
     RowBox[{"img", ",", 
      RowBox[{
       RowBox[{"RGBColor", "[", 
        RowBox[{"ImageValue", "[", 
         RowBox[{"img", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"i", "-", "1"}], ",", 
            RowBox[{"j", "-", "1"}]}], "}"}], ",", "\"\<Byte\>\""}], "]"}], 
        "]"}], "\[Rule]", 
       RowBox[{"Nearest", "[", 
        RowBox[{"colors", ",", 
         RowBox[{"RGBColor", "[", 
          RowBox[{"ImageValue", "[", 
           RowBox[{"img", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"i", "-", "1"}], ",", 
              RowBox[{"j", "-", "1"}]}], "}"}], ",", "\"\<Byte\>\""}], "]"}], 
          "]"}], ",", "1"}], "]"}]}], ",", "1"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "49"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "49"}], "}"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.687347951300747*^9, 3.6873479617426786`*^9}, {
   3.687348046357852*^9, 3.687348059165355*^9}, {3.687348094340706*^9, 
   3.687348096660246*^9}, {3.687348168084663*^9, 3.6873481912120175`*^9}, {
   3.6873523357844715`*^9, 3.687352340415546*^9}, {3.687371243394656*^9, 
   3.6873712707818384`*^9}, {3.6873713586531725`*^9, 3.687371379748178*^9}, {
   3.687371736489006*^9, 3.687371802511838*^9}, {3.6873718360951333`*^9, 
   3.6873719250942163`*^9}, {3.6873753052842207`*^9, 
   3.6873753081621313`*^9}, {3.6873756015028706`*^9, 
   3.6873757986207314`*^9}, {3.6873857307313566`*^9, 3.6873857395392036`*^9}, 
   3.6873869736224747`*^9, {3.6873926046257253`*^9, 3.68739266624063*^9}, {
   3.687392707081743*^9, 3.687392710953312*^9}, 3.687392902224291*^9, {
   3.687456724611393*^9, 3.6874567402587805`*^9}, {3.6874568582571173`*^9, 
   3.6874568942089386`*^9}, {3.687457024767612*^9, 3.687457025479083*^9}, {
   3.6874581076204844`*^9, 3.6874581138125954`*^9}, {3.687458146365206*^9, 
   3.6874581522601185`*^9}, {3.6874582360907717`*^9, 3.687458268002957*^9}, {
   3.68745833872991*^9, 3.687458367730163*^9}, {3.6874584249541526`*^9, 
   3.6874585413754416`*^9}, {3.68745869637434*^9, 3.687458760749078*^9}, {
   3.6874588842290516`*^9, 3.687458908651264*^9}, {3.687459102770133*^9, 
   3.6874592000407085`*^9}, {3.687459275864045*^9, 3.687459280520136*^9}, {
   3.68745934070309*^9, 3.6874593629838824`*^9}, {3.6874603954362955`*^9, 
   3.687460433907835*^9}, {3.6874605814988165`*^9, 3.6874605822973466`*^9}, {
   3.687460658769114*^9, 3.6874606650022516`*^9}, {3.6874607604236*^9, 
   3.6874608747434936`*^9}, {3.6874609110555997`*^9, 
   3.6874609745017195`*^9}, {3.6874610234582214`*^9, 
   3.6874610678196697`*^9}, {3.687461117529671*^9, 3.687461142372163*^9}, {
   3.6874612162211885`*^9, 3.687461326002069*^9}, {3.6874613639702764`*^9, 
   3.68746140656155*^9}, {3.687461469656437*^9, 3.687461477144408*^9}, {
   3.687461576553403*^9, 3.6874616712392616`*^9}, {3.6874619145257735`*^9, 
   3.6874619187395697`*^9}, {3.6874630702800426`*^9, 
   3.6874630723033853`*^9}, {3.6874631042435894`*^9, 
   3.6874631222155204`*^9}, {3.6874632744305716`*^9, 
   3.6874632837087317`*^9}, {3.687463316829719*^9, 3.6874633753655787`*^9}, {
   3.6874634396942854`*^9, 3.6874634524597597`*^9}, {3.687463815672886*^9, 
   3.687463817664208*^9}, 3.687464051366357*^9, {3.687464081509367*^9, 
   3.6874640834136314`*^9}, 3.6874641289338512`*^9, {3.687464901484723*^9, 
   3.687464913267545*^9}, {3.687465030837596*^9, 3.687465116754634*^9}, {
   3.687465161203142*^9, 3.687465166752826*^9}, {3.687465215000857*^9, 
   3.6874652502162356`*^9}, {3.6874656881309543`*^9, 
   3.6874656902513614`*^9}, {3.687465814836069*^9, 3.687465839705579*^9}, {
   3.6874659849139786`*^9, 3.6874659853692803`*^9}, 3.6874660171133556`*^9, {
   3.6874661132171555`*^9, 3.687466123910256*^9}, {3.687466176951466*^9, 
   3.6874662060467825`*^9}, {3.6874665194038105`*^9, 
   3.6874665430354986`*^9}, {3.6874665972995224`*^9, 
   3.6874665976337447`*^9}, {3.687466710873921*^9, 3.6874667242578063`*^9}, {
   3.6874672912211957`*^9, 3.6874673013629293`*^9}, {3.687467379186594*^9, 
   3.687467430745822*^9}, {3.6874674668577957`*^9, 3.6874675459533043`*^9}, {
   3.6874676121772685`*^9, 3.687467624934738*^9}, {3.6874678609654326`*^9, 
   3.687467977555833*^9}, {3.6874680106047726`*^9, 3.6874680164696665`*^9}, {
   3.6874680580202513`*^9, 3.6874683071526413`*^9}, {3.6874683422919703`*^9, 
   3.687468387855218*^9}, {3.687468429375782*^9, 3.6874684308687725`*^9}, {
   3.687468483247546*^9, 3.6874684912598658`*^9}, {3.687468578701915*^9, 
   3.687468579870691*^9}, {3.6874690070352726`*^9, 3.687469007170363*^9}, {
   3.6874706767047157`*^9, 3.6874706815039024`*^9}, 3.6874712929960065`*^9, {
   3.687471541917802*^9, 3.6874715419818444`*^9}, {3.6874716608696847`*^9, 
   3.6874716622135763`*^9}, {3.6874721223120203`*^9, 
   3.6874721405921564`*^9}, {3.6874723164308896`*^9, 3.687472347807721*^9}, {
   3.687473281891622*^9, 3.687473402992016*^9}, {3.687474506750767*^9, 
   3.6874746533891153`*^9}, {3.6874763019555497`*^9, 3.687476415049628*^9}, {
   3.6874774075205*^9, 3.687477411327028*^9}, {3.6874783417812705`*^9, 
   3.6874783744689713`*^9}, {3.6874786940508776`*^9, 3.687478694209983*^9}, {
   3.687478843849324*^9, 3.6874788662712097`*^9}, {3.687478910311446*^9, 
   3.6874789707025385`*^9}, {3.6874790244462175`*^9, 3.687479051197977*^9}, {
   3.687479286573234*^9, 3.687479288842743*^9}, {3.687479333084112*^9, 
   3.68747933603407*^9}, {3.6874794391465235`*^9, 3.687479444001746*^9}, 
   3.687937135294421*^9, {3.687937180590492*^9, 3.6879371873499794`*^9}, {
   3.6879373626133323`*^9, 3.6879375477302246`*^9}, {3.687939391430651*^9, 
   3.6879394659651318`*^9}, {3.6879745804220243`*^9, 3.68797462666278*^9}, {
   3.6879746585089235`*^9, 3.687974660781431*^9}, {3.687974725621476*^9, 
   3.687974790835771*^9}, {3.687974823292317*^9, 3.687974825595846*^9}, {
   3.6879749047243776`*^9, 3.687974906043254*^9}, {3.687974951682768*^9, 
   3.6879749616984167`*^9}, {3.687975016106537*^9, 3.687975029249263*^9}, {
   3.687975214439709*^9, 3.687975229967018*^9}, {3.6879752918070707`*^9, 
   3.687975292094262*^9}, {3.687975460237887*^9, 3.6879754913485403`*^9}, {
   3.6879771075154643`*^9, 3.687977114739261*^9}, {3.6879847148758483`*^9, 
   3.687984717593652*^9}, {3.6879847729614086`*^9, 3.6879848028162284`*^9}, {
   3.687984889095507*^9, 3.6879850930469036`*^9}, {3.687985591954683*^9, 
   3.6879855949676847`*^9}, {3.687985645844458*^9, 3.6879856568167424`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
L5zhL/7DNI8zzRvPfJ+ZP/75/c8f569/2htfs5HO0g6CT8aCfHU6w4Ta95dv
uvcWgHbQCyHmeF848NrNsWjHV+I6Q85rrTQUVz/w/KgQ6A0DN1oGOqc/E3oJ
zsOum/MhLu1cz/cNXiCdkp5nI9pDrNrtv4HynQq0aCbLiikKrH27I6QN5XdS
44xwC+V3/JtM5PRPUuDWha8NS4vpxNo9Ee0XK6igc6tmrSfK76Jqh8RFzqPn
8nDaeB9a596ckq2daP2H5XI6xZ2hE4I8o6nPkS7eCjBeeYT856Xt7ClAvpQ8
WNCri/jZmP66WaQjoIfeTkb6MtH4WYzzuEU8gTy4vuSzaN9VXF9ae3pmlNy/
7n45jvWofqVMBPvSyR5h0pde3CbcMNfyYd+GdVp2r5CMl6Z7HpK6DlTep4X5
ilXfSX+YecpC8rsH+sm4aIHznA9M/+MnvnfmfGNmnp+gdQH/J1/6w+e3Z/yL
j83Ma/+FbY6v4J9rP/0PFyvJJcejqnmZ5MWDLSQPHPmd0Inrcl2RQbgOf2Rw
xAPHRfX0glMGiO9p/uCa699LjJu/7anMRz5TEj+evAnNv8Dqn58j2Gnu3AUD
Mujvlb6SS6phEQXqxsfthzz94KX4rHuACxXG7J95bpX0htZ6T630vcm0xxxb
f72l5YPaznAFCWc7eLVftfl8ZDWEd+cpXV+bDH0QT1DPZsLeJFpUxZJ+kPzh
cjP58xGam5bgS9eQYqg8OVXSNYues2IBYuIW9tCZ5C0IKYWwifVFJeO5fqjm
5Bk1NLWE3gjrQAHVQvB4d9JGpw35g5B/oCOLJewZZ04ZVimE9B6nb/j3tpjU
usLu/LaAqh+ibNVIL2KL/RvVEH88cnMsE8dFR9k22SBeyXquDudxYdU1N/Hv
e6r8Xt+I9dXizPAE68u4Y7ky9quRwRDynqZTHJC6GxToI++n3/zNR+qU5/Ev
kssaLSZ1GhI8p9/7lf933/jjM9N/2Veaz+fvf03N84e/+dIfPt9/GOb5zN/4
n37+fO6ffcDf/7TnemM4RNUJh5P9hRP7J34QW/U37X6zET0n7BK0j+oHoXhT
0kXMYJhQZldLFjxQAM15LoLd1/xgXIgy3iXwjehfKhCuU54Pj68ejrQW9wFG
wcAC1rO9hM021a0+O/OhmG1T/GI/L3B599xF9FAPIRP45B7Pbyr0R43uaVvm
CYxHusVXEt3EPSbV1wEvqBCyTCPg1WkK6LEbDx0vpxNscRcybe9TQXzC/kP1
NpSXCb12CAmnE4MfjUVeoXWe2Tb1tms9BTIk1UbrULy0cfRjRh7Sy3Hxt1c9
kS8pfDiQMot0RLf/1bkd5x2Gtpa47l1z9ZEPrntLw6+VuO4dmXdJBe9PFcsL
JWHdPfWwLsZ6zDZ9Woh1ynos8yTWaXPVJ0cy/pnaQdaR4hvHyDp2BTWO9IFi
+m9S18aje0ldf38zVx82FZvLm95/5iQ5G9tcHWnBjkdk+9wKTZLzXZ8kfeDT
clGyzqxf6EbWva+elCTbR5zf5UjmfULpBpgblcqT9W2/pxfI+vZI9zeyzvOa
v4psn2HNTn6urJwH2c815jm/eiQz54f96QvJeG/b0FwdaRJ+kZ97a30nGe/x
iRuSnKuy3wHvrzX6cr5Mx3XsPc2BaxD3eR81u1WeAjEcH/Rux08T1StHVx7F
33d6V2OBpReUdkfKvNq3mqbmcVU76RIVqF+H9zvmHIUJF1MtH9tQMHgcMFsj
mA9LClTd3zPEw+agmNyZHVm0iIyfJmq7ckHkC69DS04hPH/C16F66i04Kb81
UeU9C9+CecoTzt+GBzELmq58HAS3JonbTt+XQn0sN20xYyHQ7N33S2sPgH1n
1zF7HTtY2zbJmM5bDKLbBqWczyC9B69rf6tsBVOX1Oqs3Qrh2fI8lmMP+uEG
Z5PXWj5L2JGV7NC7pRCIcD+juvZ+eN4TYC3DZAkXkpOvr0U+5pu0csMY8jGr
u5sWVPyygPyExHx/rNMDN4/gc9TdL1UFDyF9lZmP3cO/h3V2Tyf5+8g6m9i9
8Xtv0vQCyffknAxwJt93sWz4LQP2q/3c06R+3bcXkTo9Fjn3vi+9OI65/W7h
aZJ/NuTo+n/xmf9X/5m/X/Zfcc5/xVfT8+o/f3wyS3XXDk32GJB02V++asMv
Qrbowrbh8UIwOreVqcY1DBKtOKJGjX4QPnaZrqqLCmHh5rbbOk5BYOumd6jc
bph4VaG7aMKsAE4Gqt9YVesHGSxXrj1S+EZ8or7Jolci/9Fsbg2W8gHKrf1R
cgG9hLcy68rF2vnAXWN9O9feC8ISSu9M7+4h6g2Hm09OUuH+U7YrUjMUyEvv
Os4o3U080j4u34HipWyH7xL2thQYVVPoe5pFJ/hrSwKbUR53uO+4p9FmClzM
/LnyZiDSl3hxcFUhFdYv7vj9ZB0FCqcWHxP0phOSlz3SHJEuChbWh0shXxqI
l+u9j3QEk4dClXC8JLyyCO+zu3zp6sLn9wYvzObifI1rAfMpnK9dsxivwnGR
WnK1H9ZjWOegLxk/3N1E+oZXlil5HmBa9xqp98rZNeT+VEP1nM9wKOSS+1xP
F18mda2YdYzk72eDDmJ+JSJcDfOhWz1kfab1MLcz/tzhKGN+/Lm84isCMT9R
rcSPfXJ7spwFrttcazYsw7xU+thn3N7O2c8Wt+fQXhmHeV4ERznuX1Pb3wf3
z73mMemfqrIZ5L6h9SMLcp9OaJ0FWZ83CCxxxby86awh5q5MHKS/qSqeaMXn
DfJoTzfiffxeafkJzJfEqr5IRXHpS11urtondMJ+metGdbwvefabeOSq01Aa
VFvIK7UQzvxIi/ZHfxeZs8+vK+/yB1fdgkOH4g4D+0JaclAw+vu2D+u6mQXQ
mFTWbDvHvJdmU8l3VTEjH9jvfG8PlmuFMPkp/Y+L3Wlb6InF5hM34cZ3Lwm1
va2wYO9ERdiCdpCtZQrwsXaHw4sUre8EFsD3FW+tHzb3gXrg5wWFwjNE1J0D
N7LXZ4G/58/ynRsH4TmP5LZ2B0uwT7p7qrK0CJaLZZjET/XDKgHfhz4xRyAo
Zkw5f0kRpD/bets9rh+2SfqL2p+xhLXRjR8rZAuB1eDgKAXpyFte/WY1yuMa
LiV9PKBWCDUssnwKiPPwLdwtPmsBYek2kY1Id0s83l5Rwr7BJd+Sj3SnDx6z
OO8z53JQwXFUxwllGoF4sWOWOM77rlVS8rBOx5OWJWFfijn8ibyv8V7CkDwn
IM64n3yf/LVWE9IHzMznzj2K3bEl9Z6uMnf+2ezi3HmkHfeZ/uUD/1X/mc/n
13/+dv7wb/Wf+Z/7p/5Tc7Nmz0/tOJjZELM0aeUsUZDxsolytQjeCr98vHgo
EnbfePEhOXKSsE9n0HZ8UAh3brsL29wIBcbpk2qBeaNE7d1lLQGTBVAqwqZ4
/VEgyKd9n6I8GiKsZOhGd6EAGPvOioXd9oWKipse3UZfid6g8cRXKI/bs2pP
sbmaN3BKXa+Jf/SZeN8THl64IR++7hHaqfzQEwgTQ7fRR93EeBJveVM3FVhk
KDEMGRQwSrxUUPKWTozvO3U+s5oKW3J2iZ7eQYHmExuZZKLoxDexPp+wYqTf
F16iG5EujidTkllRvlZoMXKtDOlCllLkcA75z2a55mQulK9p//pSgc8H7rO0
tZhA+jJLnTWMR/oaOONExXFRieZWYax37lSvZhwXZRCsRVh3baxfr5HxzEmV
a1ino+bO5HmAOg7dm5jbzLZZYk7NWk6eq2QrvJiMuVrXELk/Prpxjlfp/ebA
cQVISkVi35g4KHqVrM+sz2Neisa5LKaqB58blMy/J7QZccYd90PwefXDldQ0
fF7dRIUyoorrw5JfQ8UQXx90aF0J4jbL1L1x+18X66wHUf8XfnXbR+N6V+zd
cHz+6raHShU+fzUp9KIDfy+WjrQhcvy+W5fh8dQ9LY/F4yk8EXaFzNeiq+O+
4XjpaaIz9h9V3o8LsT+rHhbYJIniTx+v9fRINJ/tuzfy4PyXoyBVonqhJ7zU
W1TNwsUEN36OblJG/lPavWx/uksMeMtuth3r2E7bxXbCd30uyn+lzo0FD2fQ
WHfQKbxhRyFQa6e8ajMVmjLkdt90boVH8ON2grokaB7/NHSHKIAC+cazZ+wG
4KSo4y/1m5m0OtMN7Vobc8Do8iWPz/3dsNk2RV2noAh8YpK2y+omgPc7UYfV
6i/B5vbxKwErP4Dd6m36mwyc4AnH24Em9P+qNm1nceHsh0ta9FZBOQD2/h/M
qT9QXL9rr1vngwGoo/dFByvZwN3KyewTT4pgZqfxLevQfnjvPHYttOgQnGk6
HSGN9OVxpUzQ/Fk/yJ9mfe3TZQEnlS5MZaF4qSPctMEExVF6CkonE5gt4dyX
1536KO9bbunqwY70mCxyWEEL+ZjO8hsrXFE/HT+oZ/D7PXx1vrvsRjrd4fju
AI6jqLIrjbF+hQ3b2XAcddR8xy3y3FH7LPm7gQs+ZSzEfuUovp/M++4zz9XP
36gXkHnf680rSH/4kD9Gcj2J1aQ/dEnN+QbPwP+9LvSH//GZ2dn/Xfu/1X/O
VL5Wqhe9Almf5M+oFTPCuUq6eIFgMTx69OAIW8RFcF+x3NnCb4q4qy61SVG7
CMJ0ubInGi9ApKLdG4u+cWLyG1uAqF8h8A5aiZc+CIH0asPE01tGCB5NHeYX
RQVgFKIdu2ZdAGx3rdTIVh0g3CSmcx/+zAfF49GalyXOgNu5i7vW6X8hIg5o
dE5b54O+E7HaJ9ILgh/O6tAceogzv0GycooK/OYizL50CnAcWNRhxNdNaLR1
6QU9oaK/V8ED5T3IZ8w5R9cl0olkCe4yq1Kk0ysWLpOyFHjA7Faq64vyFJP3
igJo/QsY5ptyoLjoW/+iYx5ILyYD/cvwOaWr1g/5eJB+X7uvaMlC+hI3enRO
EccnQqnfcR2b61BRI65j37LbrYB15+m5xRvHG28se9biOCRx4+9TWKdHTl0O
x+eZ+QrfrsHnFe9LGgTj9mpVp5c24/hqubSiF+LvBRxy8TlA7eDn13LQ50oo
eRXIoPEI9iiP6iDuEeysaovyGqP2X6HH/eiEn0l6qCwav+kuXxMRJRSfnHjQ
rxhEJ0z3qk4WIC7hv97aTA7lfUufK11C33dwc6Qe/r4rJMX18L2PbN0pjiMo
Dqxnb3b0RP1LHJLRPIM+V6SiN4kZfS6f/kpLHLdUBwUaCyJuyfXz4V00ziq2
l+vwOdIbK6kLyPNartGZkTgfnF62AvuY5UuFU1Q0n5tfRm9VQ/2MW5jpY99z
1+YzMLemwESfi8TpHDqx/d2JR66IX15owGhJCYWkc17m24eEoUAQLC7S0Od+
YHKOzblIO6vrH1nKuo1Wb/169apQKig1BBvFytUAK//XH+vyLGGXdve291sK
oOc2/+lavX7g0F7vWD4VCu7fvJ8HM5dC2MWvWVr9Q1Be65iXNxxD2+bynml3
WzFcGlK7KnGzHxR5/KoPXbpN65bitubIvAOih+WtnVZ1gRtfi3nTzQZQs13+
O8EhAn4e4TU5++Y+HDw/VfhKpxeePKb/2KOpCPz53w0FHubCKdeF6jwjA3Cj
ePERhWlrOCuSJrGVpxi2Cl7inMnqB+uYA8HbNlpB6mnZhaNmSI+/9me+q+iH
Z5kRoVUvLeCt2fZ27Feu26/d9Oroh/XBEr/fsVoCw9awg73Il1SfRX6go/wu
/foJE06U362hOlbj/K6oyj0K53dSd/s1cH632eX4Dvy7No9Tz5Tjc00mHm6a
+HfVP63Z/xnr3SeqhnwPs5gomyn2pYMJBuT91vi4xWQcVVc2TsZRslJFpG9U
2j8j/SGtopj0jamJBXP32o5OkfzlYwGSf2Oa85nomX/fI2OeV69m/Y/4atwi
b+umwKvwsTWHdiyIGQJO61eruBdDLMs7luvP4+B1/ha70aFZQvNDfYg0ep50
Bbm+9zgXDQkvDDKCHv0kVG83sz7rKwSxjQXvyqzDoCbincEjzR+E6RKOumn+
QnBacPjM+L1AKDCVU5QuHCIkZUWVn28rgDTNY9cabpwFrfBbhyT9+gg5v6sD
v8PygTHk+0P60tOw1HWJMc/bHiJiRVPf4oX5sI7aHKrE5QnKae9cLsp1E/q/
Y2OsmpCf5KvIR5tToIRhsrDqBspTlrEahZVRYWbT9FIFBQowqQV9F/GnE6ET
nPIHkR7FQheNRiG9XNNt/voJ6UVKiU8K1ys263XIr0e6q3u8LrQG+w/Te118
r9xXbkcqfu6ftFz5GOtOW59DAuvOp+rzU3w/K/T3YCy+n3U8P6YVcwktcdHb
qP+B8O2+uP+HrBfW4PjqHq//ppOrKeD8iXXZKU868fG8rP5EPhV6lkrumN1N
gazYsoXHL6F4qVmvxb+ECvaVSwXiuLzgbOPtDfz93cT0rQvQXEOFd05efPvG
veBCTbFka3IP4aCSGlf7iAqcW09IdO7zhLFwjpc0y25CQDrTShTp+mvOBhOV
IxTIuCC1+9NNfF/e7ZM78ufGyfYg+a0USK1hyOoIphO3t0fq16H5OTp7YuUe
vP8YXvxbCMWNIcYOI5lo/A1HDTuOo/nZdFCFexTXzZrXP8D3ceyfci8/j3i3
Ag8L9h+6b+OlRficQHy7DYMqBfoeAUNzAJ3Yt/fE9vfo+9JcmH1k7/mCbP/Z
9jtPuokTTQse/KygAvfzJzEOJV4gK/OlUoqNAZyMhvuavFFcavvDII7RFyYO
taioVEwRjbfl2YvpVJB6Hl3zlu8z6GWdzGmTGCZaHWxHal+XAM90EX2wbgg+
7amMjpn2BOc+4meQYTm88New7b03CLKp232WPg2DaHb299+j7kGnlGXwj41D
wCtlE8XakkGzfyhoatZVAHUamQXHrvfACr7BOPWybHh27ukO3dwEuD/Ib/tF
6gkErFFTOir8CfZrfz+o4HUAykcfPfa8cxeSGwabLusMQM3Y91hRCStYcfJu
g8JIEWRzZF0d6+4Hit21mTezVrB98tVhgdhCELm7szUA+VX7lU53h48WYJC8
0i5eqRDOLute4ox8qYP6+Mc95Ev9p3v2+qM4iggU3duKfMmhqcp0BvnSQ9su
5SSk6zYe45zdSNfmA2y6Z5GuV3WELMH53Z7dERdwfvec9XDhNsRVT7g54/wu
xjKFfF90SUPiOPYl02sPrmF/uLlQnaxHCYjUMGK+u1mQfG9GjsJHcr9P+Cgz
+Z5VhcfqpJ9kPvlB+g/HKyPSTyor2EmeuHXOrx5lspP8O9ec/0z+nvOrooVz
/uOmLZZgkZoIQwFLnhcuZYWvzxniU2nFMMrFbM/aeBmyPJcdDPViBH2T0Ipf
7MVQzdWy4KjZRRhU0V7urzhFXCkzWPNDrQjuDOsU7fQ9D+JSq8w39I4R3Q0J
pg9NClGcuEBI5nUQdH4V23K2dJh44Zq3l9exANZXXNwYcdoX1iZ2n3WV+Upc
fCLwTjc5H0ztleLKjE/DbyFO/j0cnwmF4MtbTQTzYXH4L5UcIU9wqRQzVN7a
TbSYvor2fU6FhVfGpCwOUcBq+vgMawad6JV5yvse+Y9cRNDea4oonglPYdqO
1r8caBTgc0dlEVbLFqF4wHz1iXgjfB7y0Zq1+F4JV+7BZjOkIztLLkV8D/Q9
I5M6Pg9Z8LMncAGOB96vKbiJeNBIVgfe3w+VEm+dQPGGh1zk1wAUn7hL2zTb
Ir6ro2zhOgsKRLtoyX5BcdpOYS/6NnzfU+GTmJCiByTpK7mvlP1ILKWeWdmM
xknxWWDywyoYzNfGnqbVjxHf+HauWPmaCps4EnkflYVDccqmck4bLngjvmlR
KGr/3PZp5o/oc2AhsnFLqAU37HmSmsKfR4VlzQlqwylh8P03pO8aZoT6U78+
3UP5ab2j6pbm2gCALw6LN9oNEcOtV4wTGqgQluidF3LDE54Yb0zecKWbqHHi
S11RRYXMPgbvZisKtMq/C9pdSyeuH+fb2oXy2a56xr4daD7Fp7kXuaD5NJO+
nI7PkRbrfd1eiOZnw8am0hdoPg9dzjvYhr7vlrhEtjfIx2T0w9/fQz7GxOEc
N474EuvVppNmnvBZz9Z1pJhO2B8TWVqO+LbDUdpdpy+CpxD3CpadvUR6slgK
3ZgKAWU7E8X3ZdJOnZFQSC2kE7JHeguzHPIgofZnupBWB6iY7f728swSyA5o
2PcaPR9HN3c/ejA5hPIJruMiJ8XAP+ClW2J0OSx8t2UT1XsQtI28JmzPSsHn
u/oKRU/KoSqXV24qdRAStcou7+oMA1UhX74Mv3K4UHezhPf0ENAEXMebzkXT
dFU21tcfLAamGueWNxNfQNxISSBMMozWYNFJLfG+AfKBu0XYhZuhs8y59+JQ
BzAt40n3uekIX3m7ZK+eQ88362butKlv4HzqqCubriVwV1dt90gpAlOXO5xV
Swdg11n/iYlH1hDDzHQl9l0hvKnmjGRJ6AfR+MqkzcstodGMJbkF+dJhF5Ua
vE+nkMeTsgX50iKNtDcyaoVQxXat8j3yJbFd29cfnrKAn1W9z3Hd6US84hn8
ntgIsamMIqR3qeuFtSewn1z3aMb34HRPSNRp4326YSYG/H5UPoEq8ndUF1IF
H+H8zrp3uhP7xs+LRx6RdZ7Yp/rYl4KTzMn3z1Mqq8lz4wGffg6Q9SifRPK9
0FkDwaTPmIlWkvXzvJqNpP/0nRwmeWKoLOk/q98IA09REjxLuX1dN4sNog6+
7LjHVgLfB4t4BbLjIVave+NEFxOMXFk6w7i3GHzOGLJGV8XCUjHukZB9M4SA
vcD7hQFFIH+//HKKeATEz5Q61q+dIMxymn+MhqG46FzVErszwSBiQlnjqvqd
kNbVURIMKYAZP8cHb9BzcFt4Awft0Fdi40/5nLiMfKhbuq3tqOZpOPJG7XvI
dA9h9eXj78f8iJeduHyD0xNMzi+350Dxj5piks5mFP8w1nAca7KkwAV2tsyL
6XTC/xeDdAPSqdD+PQ/qNlGgeon8XcVAOtF04NpQDvIf0csfS+qR/5z7RFGk
I71YUXdtwOcez/dH7b+PdKTCsqJtC3qOZ0kxZe/C9dhXpQF9SEe1Ls0jL5CO
vtJF5KwRZ1mWYdSHdNp8/axgl3APERm5YtF6pCPlMVeOQd2TsCaT1v41+CUR
+fQz59V7VBg+nrONtzcM9p/RN3/2hAUYe/eqCD2lwixXFZfd5iAat9DaZqZv
7LDUYUeYoBcV1jInnDddf5UmKpS3VtF5OY1VQtpsn1YBmHNd4JE1j6SF32dX
06gTp6k+aRbdrVUID3SS/Mr9L9GELwzuD66dfXDq6BMerbF8ED3VZh35wY5m
UvGEn9OcHTR+mVU/66FC3oyGYCbKlw3T911KmZ0mklruFzShOEpIIlBdZKk3
lPgIujhwdBPGh3JnJ1HcdXq6IyYh2AO2uy1a7BBBJyjeO7LH0HxWHKhN7tKh
QNy9TMnKZDrxk1gesxLNQ46tSr4omrceVs4mfO/m7lVW1vWovQdvWsoXfgqk
2FvYJw+gvExxCW0klgo2FRWvJkrPwU51njylq18IAd+FP0pD8yD+SPeS87Ox
tM96Z4f1P3whOIekj/kdvwvsr01vpE5WAcV8SlONmCbu23jVbKnIh7C3oh7F
1/uhV3L0Ef/FleCjvajgY9w9EG7RGpHfNQQvqOXmhatlgTP2goC2ZgUo1m4W
Pnp/EJ6eiJy6WaJB87WQ97caKwfHRDf+wIRBeHbiW2lk7xnINYl40ZBeDqoG
odZLDYbA3LczIrBGAko6nBgmgksgZR1F03bqK9wN3Mt/ofUGba+V5kzqkpsw
mZBsyqnXBrdVLq24lPgKjv5Wb1h/1xOyYw26rZcXwQ7mwiPCW79CR2lW+VV3
c1Dqq5HwRbxC4MoiGa0BsMp4ILXe/Qjc9FPS3Y+e822Mi269jegHbpnyhd7x
lvDiyMENU9sK4f2bhTNqzf2gM3q2gI/dEmhJQdprENd29Y+fQL70vLB5J3XG
AjQZq9asQfldx1W1zmXIBwxUs38v/2kBo5Muj88ifzi/e+Vh/LvPPU6l4eb4
fsSir5fwe+P7Dhqy4PyOz8pjWBXxfQpK8TiOMlLvjMJ+klEkIoPfJ98aXXcX
+8zSuzvI+7ymy5WWYL8atrxNvr8oiq+LzPti3e6Qv1co+5ruL8OZAoeua8n2
2HNA7ZHGD4+NSyCjU0BlbXYCNN/QUuM+wgLxmzQ3SycXQwxf8UVziUtwQJ/X
99AWBliTxzFypqoIeJZtzCkMjISd3y7fEFSZJN6frFxyKb8QNqT092/uDIbF
2/UkS0K+E5qR+1gocQVIj3xD0jd84VMj/yeB3ch/kgp2b03LB0MNkcZokdNA
S9tX+b6jh7jA5HHxOXc+2BdsnKFNUcBo9lnKPclugpEwLnBvpMKXoIEcJhT/
SLimGN5H/hPCwvLpBfKfuh0vz1YqoXW+c0XOsyA6Mf6aT38ArX+OCj8GKaQL
9af84TM+dGKo2dsa16W/irJX+uL7toLZfcnIlzr3VwRQ8DnnqwrS4ckU2F92
pZnyq5u4HCa/yxTxTQTTktV73OHTynzpL9bVRPnPRuMAlNdUf9Oms1+NhFBD
lWSmJdzQEVWr/PYdFb6/7+jduuQqTXjVwT5J9wW0bypcP7UVUFzBVDYbKFsO
mXZjByvHRWhtu49djMwugzTp5aYfG9phyQvLKTFTYzh1MJRpHXcN3G0R3LM8
9y247xGMKdy6H6LcEiZ2ltWAqZpqD0dAM6QHcft1dhNgmFQGp5WrQGrEvUhy
pgAiBcsO6Vzgp9k2s96pzSiDyT1L90yrB9HqqjYK2a0ffiCzJeVr8ppCMN9w
5o61oA/sPFVo5ds8SWi1LXz4ySgfUsSplxccOg2rZrj7Qs92Eal3ZCPz6qnw
4fu5yUCqB8gGdodI3kc+LzOjE0ulwvUHvTkgj/JNcaEBGooPt7x2fOeE5l9/
cZTTq3UewP92oZzu7h5i6/eAEOa1VNh5U1FcKcgTVkPas9UnBgmJw8c8M5pz
gJj9bS/wIBg+vXJVOXF3lFhjVhLpejwb+jkjZjcvvkKT07D/utxokNi6Xmh5
7M27cJfV9S67eze8fh74a4XDEhDNcTE99rMErjnlsC+RHYb084FbWt5Jgl6n
hsKqIxXguC6x9lz0IBxjli5loK2H25Lr7M9srYAVaz8f1/w0CPF1xPaCY0o0
6Ve/rizmqoB+qXVOa1C8ZD3u0ly2yAnCxJe8brhUDpK8utoiIkPQnXn13XC8
LzzsTth+cFUpxM1equTR6wflzoFTLPXptIQlTaE3V96GFKPXYxsPvYV4ri6m
0c1PQQqUJeTvBUCKYdoXzQ/3gKlXsZtzsBfeHpPeUD5kBlwsT+0UTxRC8Yda
23UmA3AzRK4u5McRuG4Yw7UsuwjeHF/KH4Z86SH/0NgOl0OwV/iskcW+Qljb
4VXv8agfto1f2q7LZwlrpcStXhMoLzHJ3PIV/06Zd1piO5MlBIQwfPiEfKl8
n9nXbsQPOjhFzSJfyhtbFZyMfENwi2Q6/p1WX8kDI/44v7umeMsecf77PuL4
3OZunZkxDcQHbErbcJ28zTp9HXk+89SCOBxHyY89GsH+03mLi3x/7NOzptbY
l7xW6O9azX4DWt507vuUxQnB473hXDklIPG6T/jchiQIrj2rfVuTDWpmGMNG
xorBlnH53SMoLyOeO16oQ3lZz/dr+5pRXsY5bmTtyBoNJ2yfTZQe+UnY22u1
rnhbCPs7Nu47KBsClsc/bbv4+DuxIdaCmze1AE6YyR5k9PUF3cfTGzhlvxL2
azK4mlH+1SlvDQ8mvICyN4HPg9ZDtEQWczRx5MNN3+J1WpPIN3abfeBZ2U0U
dW3f147ih/0jaxl7j6Dn7IZbmmW36MTumP46FxRviEUsUVNRpYDwqcfxHqF0
govic8GviAolKn1b41HeZLOc26bRl078CJCrlUa62KT3OVHelwIrmRKNbdFz
X2Tp+tSdiB8MXKO9yMwdPiYL8/kZtxJ3P9pUsaLne+tpSd2OkBiofxe9jsWQ
G37mJOb2s+VDHN+FwztvX6dV0iLvd/Xw0JgYL0pPG+ZB7PfTOym8tcBacvvg
YJY4mMTznz+nWg5HhRKZqAZfIDF92OH6hDsEE7HZGtOP4WLT+JW7yQOwMNNo
7WSfH1zrOlx+90EDvA+qEaNuGYAn5ylyX3f7AWOGaJ9SeAPcuyJNSUn4Bi63
Uya7HDxh87X0MW3dJyCwV8/AfFEPcO/itNyXZwvc91UOFHY/godytRX8q5ph
b7HZxROWBEjcuMvtdaIKSjt+58cYXwXnz5S9fLw9xF6h493Sz4phSf+u8No3
FOg/Ub/pkfAEoXbwU9yHCSqseH9Un67rDYLJp36oIeOz86OYtSMf9n61Wx/X
i+yk9dNcO+iE+qoHR21uoPZ6aVLBzCfh6kzZ5avP+wjrSz/lIhbngpRAxLZ9
Zxwh/ppZsgnrT0Lq1dBD5cFbEHsnuda4NQIc3J+bqKUzwnLuDGMGuAmDPW3m
ElaZNGFatuOE/BjxXrJg7Lr4bfj2c4DxPetr6BUoubTJmxNkzZYNO0oXwsN3
2W1rnIbgtZLw9pnJVeBcTQhsulUOMucaX71D8Y9cCo+fj4UkWK44XPRRrwJm
3ArtbboGQfGp8uEbVmuBNVa6b83OCmhq8L6S1jMIvdHa7x76i9DUL40x32St
gE2yFP49WYNwkRaYfZ/jIJQ4rYzspJTDo/gNGf19g+C556uiyPdgsMkqe5Z2
rhSMfFR8uWAAjqz5Ufp47w2abLDPmDP3HXCIUaxXft8F3p7hfF1Xq2CF7+Yn
9UbhwHdhiWvIrWpIjy30s+jthvUHeoOsd1vCZqixnsgtgNCD67mvozzuiy5j
7xsRG9jpL5j8ekExRAsN/kzK7IedQlcSVN4eBu44z8Tr4YXwRTRHfiavH4oU
q8xLN1iC6SnNh7nqhdDqczqxqLUf2N/4U+IWWMLExcIqVZTf+evENyUgX2I6
d1Hn0W8LUNaqy36H/OQB37dufK4g49AEzxPkJ29niAB3xDlHaljx/l1iXXek
AeLbFxtY4zr5hjvqeTiOsgzc6YLr5OtuZEwcV04HTd06Z5vvC6Ho4bmMfZKl
sPWkU1FuRwpMxyh/ZmVdACKXhw6oOpaA0vudLCuUr8KRRb9mbugxg8Gk3zSv
fTHclNVtWXwjBtgeDJwpEf5NBEk3X3m3pAiEDFLZBBpDQPBUSgKnxgjBddM5
jrG0ABxO/l7jn+4LVltZV/bpfSUijizf54LiH/rjUL9FjKdB6YvywQ91PQTn
BSHLggX5wKuWkaW1wBOaLIV52jZ2E07XI2Poz6iQtrTlAJ87BSoG+dR5i+hE
xMNOIdMKKtS2iKdp7aRAkpBf0MkYOnHEoOlWdzEVcjkql1gbUaDxFvvTY0mI
61c/iUa+NLt0ZCAq8RQY3mowrke+xL3vYo068hleryAujsPhcCDzVf2M1m8i
hH+h8SxjPnzXbzmk7H6e9qpriNWQxg0ByXqGLNl58MhVyIUtpBACzlxlFnu9
kfZdoHrD06MlYBlqI76o4Qscn3A40LXFE3QvNrqf960HIfFvgUIPB+EhsXk2
1vIc0H+VWXZtboSQQ48ynkkPwLtT4zT/qnOgs2e967WSp2Ac8Wr6h+EAbDy5
OvSJCcpXeNccPn7vKWiK8Z4GFK/PbFlsGvMuGF6y+qlUez2FbAXCe//hAeBq
d2vLqPOHdfwxUoz3GsAvsKkm4Ecf5PxUUdHgcoM0V9sPb2Tqoc6l7+rScy9g
T7n1pwvh28DHbLPEwzs0cAXrmiN+F2nM/HdfrOedfeDWljxqGJMPyx5LGkUs
CIXtqfGXWRhmiQV7N2UPoHlWk3vozI/yMq3AoAL+6B6CI9uFp1QXxXv8pY/W
VjlD0WWNegPhUaLY85Vr+2wWuJp0ZsiyHAGhpj3V6be4oMm/+9aTZzcgQH0b
Zzq7J7x8PWHyRGARGDx4WDG2NRmUXHtHWUL9aYb8YbMt/AuAqarGRdgoDWzX
BRYcacuBpd07LzxSnCZczHy6v367C3ZsSSJ2FX2gdV30kmOGGGyozBHIcyyD
hzlbeiFnCGSGes5si5CEitRNIbw6FeCkN3G4rWAQVtv0lBcJSQJP4/JYKY0K
uP3olyJ37yCkXB++dS16NdyI0Rm6DRVg+0ns8V7kSwbT1Ts38PMAk88n3+4f
5WDnrG2Zivp5bflUwlNOBdp2sjNwHiiH/WlgxFwzCJIKT6RuZYXAnccMtJvv
SyEve5Q94/cAZDgVRKssSKAJsShsjdTJhfe6B1zaPtPhxrVI2Ruqd+Hyc75G
JsFYGGe+svhr/BOQ2y8dO9zSBTo7X7k35tnA4K6C6OxXBbCUXdJ926p+2HPz
vqt54BHIlf2+Kpa/GHiHLJc9+NAPpQdmHwpPWIH6TCxD+NdCKF0Rw8N/tR9m
ytIU3ntZwhaHe99ktAvhrEInnzbK75ji/Hzv8VuCxqHQMg4URxFNaYfckC9V
OLYuuY/yuyf0Y8Y6KI4q++GexI/rSxKr/HegOMroVH11ID5XKTXdjPfvNtgU
R1gj/6EHcmhvqs+EowI2FXCDHzYvkqGwvCyFX6pL1kfPpIG4yvuk1dcWQr3z
zbL8JaWw/5Bs7S/rJBgbPJoXeYIN7jCP3lL5XQxCu23dm27HQlWRnL6g3AxB
NXV7et6nCMIb3yjKyYVC0sGLd04fGCXkTizl7v5SACoN+yMST/vB69F2AauJ
r0RmuNapJyX5EMKiwdWA4vz4OykqxgKfCftK+fFFQvmgd8ngw1cNT9D5/yow
73Aq3ziM26GSKKKy98oIlZw7O2Q1VCJUkkgZmQ0SR7IyI6VEWvY+5Ng7MwlF
IRLnREpC9Xt/f7muz3Wu5z3O+3w/z30/NkqiSXYTpKsfNfsG3uRD+36Y/LG7
PjipaA/lvnHS91Kxj9tq8sG5VpvLxNkH/pPOUdwvxkmy5t0j6UQu+nGfL3HQ
3gcjnb1sg7GfSVesVC8ZEOf1tlCNc95Pr+Lc7I6aAotuksOL+BUtojcZ/zju
sX/1Bh56U+7/rRQHL1R+X0rORyuTTduOZ3HU/hKOL+o+OtSY0leOnj8L0PxI
xTZGdgIBshs33lfxwEEBx/197xuRmL81qlDrG9w1fxw4b0hG3p6g/IG0Doj3
1sxv2kKcW7p+GW/9yVi/pM3f1NQOy6KCGN1kGqrLdn0StybDwLVHueJnO8j0
EOXlGBpuqYRvUNUm49gpnrVp39oRJF5nssebhqQD9r+tC8OgoSqbq9DdjvCO
UxQfBhpupiQ9qUoORa0z8+3zQe3oPFeaydBPA+XdTtvfFUEY5DO1vf69DevU
PtLi6j9C1Mjh4Bore9TFKeU9GqiHfcbK9JWoKKpyw8f2mINy1J63ccuNM4XI
V/+YvUMgFMN7uSgeLhvhG7KZ2zohHyHVqiy1iz74UD7oe4k4X/QMhGZU53LB
9sdhLDv0LAb+nb56kZcRo7rbuWvnM/GTg6cxK/gIdBc0NwQ6iyKe3d68QjwF
H8m3DpdePQadrZWT68cVcC7PvWTdywTcs3Hdsk85HNMSHlIXHorg6bYyVcPB
FOjtj2Eud8+kfng6YDWZ9o+0hcz9b9XlCRrN+MbtR0bAUuvI77zIg7x6xaOn
qMUgud0aODH1Db83Tj1TtBBHvrFu1L1cCoT3HXzSG0/HbcfIwO+yErjyw+X2
Y7lKnDDgvew2Tod/mOffSG0JfEqSHS7cVwnb7pOe7pMEnwq2uxothW8uR0rX
K1VC1teIk3WCDo494SnijhIok3T2lBijEPu4vLP5/3un7JAf27tlqC9+nuTj
1KXArMzY0SSTjsLRWsErGTcQW3dLrXx/OUa2cgy+DqXDk3nh1cewcKr4Sw3h
7M0FWF9RtGs/pqA7pry6htUcHXEGG9M2puIkbcm7lbUP1y6SKjKzB/Cz9/z3
ZgYPiLPW7/+qXIrgU04DC5+mwck+d9QdjjA5ZPvbN7EYW0wCczXW09D181St
MdcpVOxJ7bl9phhyRR9ttIh+d4JR9r0020mI37lz/45VERrcNmblthL5xy7g
615+OyQE3CdOlyKcmrFWzia89Jv11rgn0e8CE2Omewgvyb9Ql/6/39VcyTw3
Rnip+LGq6AW5HLzJ+ujXfYkPSmmcxYFvy8H5QJ21ru4p4nbpGP2R4MWBsgfj
hZLl4FdIGnDQywD90R0J66h12LR79k3lbCmSDDt/Lb9JwuubjixROkzI7N1Z
P61Qgttya3TKjkdAoTbZaH/bT9KhO2OeNpZEngtxutr7IQgSO163ba6bJUU8
NN2kOlMAoZjSy8aOAdjnfoBJcmySZOnx/JqscgHoIS1sbn2+WL/XZ/pO7wTJ
t2S72uznfGQ5ZZiFrfjArPXQi2TxCZK9/9YFro58eF8LLJ1i88WPucuGni8n
SOuXEuWlG/LRN780z93jja1GP9cd0e8lTRrEU/2IHMXxm6F0ghoP6Xpd7ok8
YSwrbOBy2VqAo54RFbdeZ1O/B5vd7D2vSVU96xLqM5OH7u2Xtd1o71DsVHFy
t8xJ3HWK/+UfUAtVG4+NesQ5aBt1/I7LlVDId1884XOCyDMGeacv76eB4VdW
waFVMu7Yp3l2fm4Hk9WdbctpNDzPedtcfI2MHUfP3l/9244SEuN04UMaMoxW
h9ozybhAHi+RYutAb//H5iqil93I4WCfjiSDS/N2+mfGDtxpOsl8MJFGvKdA
w+p9ZJga7hoc+N4O61zDwx7Ec8/3/4v6UhwGGenVsKKadvy1vnIsUJmOs8H2
r58r3sSaWhGu4RftCJG4gSXvCTyT1vQ8duU8aHKZOkO9jaiusM5vHLkBr+el
WjYH1KhrQvs26doVw0cvzkn/mQ++TUxJWYrxYdOrwh2ZjvkwnYu7YTvgi2al
5umbpHnSk4RjArLOL6HHq+zWWm4PMVvfoy+SuMEgdb3C0+UhxuqPtRgWmKKR
ukPS6KoaVBR+D41eiYP9x20b7x01giNPXcLO5n0oKEqXJVtHwzXkPrOz53UU
Li/KuOvvRLfIpXpD1zgItM+Pp7jepYqc3vFex4AbOtGiBpUvHmJ+n3VMMxrx
qi9KRozOirHI+ECpwnw4vPuyfe/SDO7X1udafhWCl6XRe4WJchi2sF33XP8N
vKf3eGwfFUf9aam6mDkK3rfvfJRF5JZAKD56KSEBBupKf5p0JQ4E3HFuIzxT
cyWIxfSUBLIjvN5qqFXi7ObSTitiP5xQo1jVNUnieC7b6SPbCF8VkR+2j9GR
dtBm/SVfeVzfcpX3+gAFAxE0yd0tdJwREA9neqFBbdtT4E02oKDT+Q9lKpGO
pyvVuz1O+6OZ8ZCbUE85en3D773ppKMlRXyLXbEGomQUix0PF2H0hbjm2MWv
xHnZZeMkf5869M9onXlYBsqaQ5Pf7R3G8iUu65h97UjRF3dPFQ7CsZ2rTSky
VKhZhqtlmU1i4LAGb9uqA86p8B/YylOMd39//bSZmIXpoaHu0IZTmB41nvrU
Vgw+YZudGbGzCNxL9bpJOYm44Fc7w+yLoJa1wDpFncXYznFmK8JLemYBjKf2
FUGjYK9qI+GfdbtfRX5jtUOmBttb2lQxPnV5b/WQFEEOPdVJ2IPoxbYXVlbO
F0LLVfmuWNw2+Nx5utT9vgKfVvYrB6q8gOHAFd5m1c144R431EAuB+W6o+I+
5YfI0bXM3BzHgbMNGXsULpaC9YTh34bZWJz8QrXqiFohFWoV3mMVKka7h0zJ
yL0QRHzqXuaKmCPtX6hWPmJXiD/99qMYvIJtRbfkcoa/kIJUJE9tuVQAjl87
hR/v88cr7xrp1KXPpMt2rOWBXAUo2e+emb7TD+LVeS0KKp9Jp6YtJAtn8vFm
VJjVgcMHv1REH1/0GCcxjfa6GE7mIzW5Yst581gkdmd/MxtiR/ilDbu37i1A
agvflcPRKdTG686Zs3afqm0N30wd3Z8PPdXD0Z92NeCA7MOrEkUbsKz/cPqF
KwVsMSmvpbfP4rVXHOuLsiCiTzMuGUa3Qckprt+cgY5l7jNvxe6Fg+fS0ydS
uh0YnA01S/angbyJyWHBg4xfGub5Z4ncohdmvpKWSeQZesixyxVk/OUS2xTP
2QFXFpvK6Qwa9PahiV5Exmo91VCWowNla16MJT+iYe9T1tQzT8hIUFdVLie8
RKqVaBm7R8O86r+ZEh8yZA4gz/VPO2onsp7/saFhduVqW9d2Mm5H5kd+HWgH
h5xM1+sDdLQudzWSPULR9SJOr53wYYis7kih5CQedV3MyjK8BPO9ryKku5uQ
GiDcG+nwEKd+7/o0Xq1G1WukGG2PKcFWnz9pCloHMdKe6rgQxocYFi7XfsF8
POHJ1hS/74f9H1mKW7oWSWel7VXDop7hprvphQPMR7F6VU0q9roQ3J2Op//Q
TcXOvUwyryP1IXOczYJTWgeXv4iy33obhUt/Zq6ZkXQQKZAVOUk5gBzXyhqp
b+HgLKdx57aeAtUm7OyDPF1oL2kPz3BHIUkoLSXn8wXQ96w0YEQEJUw1VQbV
KUi9EqemaHMMU3u+60ZuZ8Das+pb3zQ8R0G98uD92jEE0x0rR59vwqf3W6z7
+UvxIyitVlf+G9aWdegdrxcF82h93tldFKy9/NFF9RYdK5t3enCWisN2Uk/0
+TwF/e8zmA0H6RhMP/3HR00CBTd6ViXFKlFvE/4gnshL4Qnhia8vS+CcQpvU
vFQlwksinUIJXz2WeXd1Rl4SbQI+vBO8lWD625/lSnipLu327RlZBbh2ZE8w
jVAQDf5PTn10TCQazP/KkaZqzQYGpThTcLBuPq89hQ4Pj3v+j96eQ8/9u/S0
cxXIXzXyziU+v7jjE3djXxCUJXbeiI4tAeNZp+Dxrln0VVh9udjzgEo/7CPo
+OkpDibnVr7s+4Rqxc/BFbQyjPs7WXK338aXjVnnTko2IVbkeeNlzzGi7x/+
KldzGmdrwoLltxYj/vmIc7TzLCY2/vgww3YaXoEZHDvWlMCX1Sr5I9HjTIfU
bEMs7PFQ6UTkiHMRTvcHb99XNYuo76eM/gjYIVzwJWPDqVoYzYyltmTKg//1
gbPKTK/gZ9k6VnqoBuV2fTLWf2URW7wmQbOgCvQeqZ/Hs8pBuv5z1TZKHEFp
Ry6VmlTivLGtjafyS/B0Lb2QdeWDj3yhBjOlHF16HbnB11Jhfsww+qIZK0JK
yc/v55bAKzzMw7kwAutIa5Tuci+SlN/zvp0yKcIlIZPd0dnBsKnvkxJappFI
G8f3kv4WgOvc7bc026vg3qWUv1l3mhSbllv+xKMADFsH9i/xBSJ8UsKhOvYL
qS1t240W/QI0NXcJ7B4Lg8LjLvmUIDrp2W3FPdeIz4v92CB0/rg7Jjgt8qgM
4rD8e7J3zKUAXi9vLdvMJaIgXnC9Y8Y+KuO/TDZP5xJslLu6f150EpzDXazi
371QpdNSb7OuGbFG6dmOxP7ZptRdnIRwLD2V4UhI6sCG07lK40Y0ON4bslgf
Q8apk29SqCNEDpHtq/N8SsM4367Zi6VkPBmSs4xY24FhXV5J38dEb/ILc3pQ
SXgpaNe0H+GfhpwJwRsEl1xezuMmvNSx4mojTnDWD2TXIMJLCc6/wjXyyDji
n3TRmr0Dn/JvZe0lcpEBC9ths9tkRBxWPHSUyEV+lxeC1p+hoehqnl6GDhn8
Sxm3yz62Qzkwc42hNh3OZzK0Lk2E4uQTRdXquXZsZ9eSkds7hRLhikZ3Xk/Q
jPlLqS7NYDUTDDn09QWeKN59szqqQuUpEUl7kVIKP60DNj/3naf6RH4QrJfe
DC7/ppDHgXlgf/68OCfDH9qH7j8d1v5Lmo72N+/+/gSXn323S521wg0GrpZO
RxmksXSyRq1PwmBy7Z7KCzpwPi81k1JvBCVZbq83rhFwiHC5X7S4F/wm77hY
bQ7i7d7+aqvGMJSp/lu8/dUYe44bGv5kMYbzEZ5XnzgiYGilxBOvGoQsXlkL
fjd5eA0dkDYJSMSQYpuByPYk6nB01ILEbiY0e2Y+rTn4BKxneSTesfbgh7nr
Sq4HB6T7718oJHoCJ6f0JEfnDHYmR3rW7dmKqxkZ3R615fgS26z+5yodD10H
Gc8JiEHMeuN80BUKfGz7llie0/H39x/v1AhxXNy7obDo//sfZQUx/wE6NG3S
s/eISICtn9l9mcg/T0t81j75RPgnUJa37qwE1N0lh4UkK3Gw8+6PncS+kt5p
y/2oRgIiMTaPRLZWogoTF9QJj23oieBgFZCFdsrjh+RfFIhfWh2Sf0+Hlcmf
X6yjnFDZknCzLZ2Cwhruz+df0CGpEL+3LM0E86Qej/RvFQizq44ULaMjfvsz
9VsONyFrUK50/kQZDEfXkT0E6Mg4upSYOR1HxY6ZXMfMXORdNI6KX52AJUOX
4pm5NMyncklPz8dj4Nw5k4a8dkyz0cPygkch450rpPvVGT4fwhsfWBZDS6t3
3woXkXM0VQ6p851Gxt1ba6N4S1AR++BGaPQsrv0Vp62etkde3B199T/d4LB4
kdotrY0XSlIZauQaaA0ah/a79kDhSWxYW482knZ49xqk1eBkw4YJfrcOiBau
yVox0oR6sfMO/g9U2PQGctl51sAr1aLL/b0slDumxgtqqiCn0h3IyfcC94/J
7LFt2IxnDyUt3zwuhynDVyEJvmT4HI/cY7+BGWw8/OfXKJfgVo6qcJrRbXBL
ykY2VSySRpMWjeL2FiG7TDf7sF4ootx33Vqr+p2k/2RZ6adbIS6tvfPkewMZ
vE33zWOj5khNFcl8N60Kwf341aYYhTsYEmHq32kvhP475utd6ok8Nxy0Xmw8
mhqiqvEls1GVChf6ObWEYojPV1VuXPiAe8P+hkKN9oj9U6aWKVMPuRfPLgfl
02E6vu1A1sFQSJ3S6Rnd3IH1WczDm4/T8FP78qXrguHo7JdJDPzdjtdMN5W9
CT8ECKVL/04lY0CIFDXN0oG9moz1+oRPRJXWndtfTYb+1G3z14RPtBvcW2YJ
Hnfa5o7qKzKiM18VjxOcP2HyWQHBNbJDEz5TyFDkMW/930t1G8J3vifWzwzZ
/PtVIfF/Kyh+Xib848VafnxnOg2uxTx3m+PJaFsbPPyTqQOa5g2WSudpxHs9
RI82JCP+sGZR6Xg7nBJ6TFpE6PjBw1ObzBqGeqPgRcuZdjjGhZPDpb6gOKpj
I1+oF+6NCTzvGW9GaQrr4sGfRbjr7v/GJlWRyh5nd1o+rgz3Nnr+Wjp+ncpp
8fa1cxkPgmwllEyKc3H09zT9m2EgBmN+X2z/x4zR2eSNBmOZSLgp/XGToTku
CbMO8FcoY9w0Jm44Mh67ss7v3nB0H+Z2J8x/1DZFUl6xQZrULaRFGPorm+9F
yjqb6+X5ByHTvxrnlhyGkKiJ1bpsfUzrSLZsu22M9Dd1W1wmboFZY7Oyoac7
hnm11z1rUUbKG7PCVw3x2Nv8psG0xpH6rG0X+QQvO8YakzfbvHiMAv9tjBvC
C/DUovp73ioDzCq+M4azFGBBhEutqmOcOF/tWJcdeHAlz4xPZKAUZucS39uU
Er04Rv7dwa7t0P429ft4agV6tJTzBwif66Sf2UHrFcUhscpLgtEUXP+wf8mK
8EDLupW/c4riSOL73feVyEt1Dd9zKF10yN1eulHSL477BhW75LZXYr+qmnXv
Bzo0ppJUj8hI4NKgRYOvUiUiffbGniH8U+PvsshB+EpaU3eXwI5KcOvV3LIn
fPXOtKwuTV8K8gtjfH2CRL+7lvI5nvCbwJmYYedN0lD86dZHHaJA+O+o5UUq
Hc094kmprdupnc6swyNWFGx3nl47+JDw4bE/D5r+BWFdH/9LjyvlGJSh/lt7
lw4Gl7Z/SWXBVL8de42TNQtA0Qm/pBAwCcPaua55PW/0BO2+4hWajAFu1769
Sq/xU5F3eFl8BCmt5MX1m1xAPvhvm1xtMSx28jBK7p3FLY5PQ/tvncawiD1L
Fukjgn3bohZ+HkT62mqPLvd6nDG8eyNQ8RNkqJfrH4sdQY/a99Y/LfVY4Hm7
76zUKD58d/F+ctMK7JOXTTYr1+OkA2dn94t+xEn0OJm26CGw8E1bgWcthPnK
+N+X1yOeJc3Ewl8J1eK1go9fvsLjysy4hMwXeHhrsarmDh/KJum8TQPlYBI2
67UuuIfmXoYzkUrscHM71l37uwTbMu2679slYvGauWhFFhPMH//U0/pSDMXz
95q/ld4FvDgWm8J4UUPelKulVIL0OxMP/oSGQWtGktnBZ47kxf/pGfpKceFl
bL/QujcQ/yx855T3Hlx+Nf5nG6UGl9VXwx19ZrHy9aX8mtvXYa7S5KBm1YYZ
wennYj00zHh0sGzxD0fG7hdWuzWJudZ8sxBEpuFo16+AkDAytDtzBdR+tSPU
4uZFfaJPGa12a5IIzwSp86uoETknwNVr4S/hE+64ZD45gmeX+A6sI/j8K7/6
FYIfNHR/X0v4J2Cn8M6/hGc+urFINxD8rGtKfBqRi8x4rHhTCX6U54TcP8I/
T9uHswSKyWgUPS6xh+hlz+qfhYUQ/qEcX5P+I5GMdX4+l1yZO3BFo2H6nDsN
0ekzSV27yTjQmcyrT/iHJWjNt1+MdBgzKH3o5w1DkPPOdB6CC13+LLiFaRpn
d2+c5v3rjeNHZ+92Hm7B87s5lYGCFJzZ+sk/WkiKKrq+LPwMsT9N7Rnka/vD
qad+pB0LF90A6SVh0e1rcyGx8lN96PpVfHbsEFlK5gBl6rfvmMdj/KDtErX1
NcW9+4f8qwV2IuN41aKQShwytcf1OV33oZk55LuPvikOSDKkO6jcwsfHIp1P
SSS8VG+78VbPEnod5RMeTWTkdoxMfBLWh9KLUuajjgZoDJZ1+112G7IH8rgS
u21RHZh1T2KHMhxdNlh9J87rMq4VZWd3PwwxU7avE1qPCyW1vzStMxD2YUFK
Xf06JhrY3i3fXSZht42grHAecs2VJJWU+8HcpIqEr2vAwSaQcJGxBNcjqBot
76bhmlQ1HSrIB5vME/bXDpYjT6PDLOsU8R5XGM5efL0d3K3lGWNdFWiksozN
ydPBuLvQL0VSFH5qzPtsQihw32PxZyWWDkGD4E66vxg4VrsNw8cpGNE1czr8
io7QvmMHRXXEoaVqvaZHoBIS4Zsq6og+1f7kH98aovedKBQoLNOsxIXog5sM
RulQdlFsfMcsAaEcX1MVvUq0TVFD/7/3NmaJE9r0XgJGde/T3u6uhLkjLzsH
waMfjAgb/paDSsfNJH32Shw9bX7bv4MOdf9Bp3M2O6k5LyRUhqIo0GSoWOJI
paM0QG7PLpcrOE32bgtjqUCd4YoCrZTod2rXrX5ZXqGeZr1X3dRfgCTfN4UO
xyYhlyr7do+iByxZ7kisCibje7Ku0AWfFlzk/3HwlcsnbA1av6d84Szqlky2
3f4yhdGLTJqn1V0w+T52wbO+CZ0/lF08H3+BjVW1qYiMG47U65pHKTTDmtag
96d6CmvbFG4auJ4DY50R75anTXDdn8/ipjEBq7/R3/+ST2K5awunFmMjfi3n
R3QzDuH79iv3p1aM8ZH7/P0inTqQFSW+chxpwYsnz+ytxlWxi+S1lPC+GmMM
W2IOPynH1iLckOESx0JkjIXzQSKvPlOdM9tUDFuaLxd3tggYL2gvTplSsG5L
Bodqfjn++MU5aUrJwnNWZ+mtXyU2Fa053NTRC1v3RgZzJzmoB0ktOD+qQcbh
zs5HGtNIPCP66PVrL7BFLfnZbWiBpuIOKRKRP885T94bVidj4QIcj4sSHmAa
spv0okHvfsadrhoytlVe1rhH5BxbudyDllk0qApML5IKyMR7Dy90JzygfciJ
8T3hjcHRk2FOhGc2fCsuYSU8I/KARZyb8NJ6JTH6bYKvDvW+EyN4/duZdwwE
37Lu28IC4R/Bo9F6awiunprl10qsc5P9++Uewj8a3XNPHhP+KdZ3NWYmeD37
Wj1dwj83ufcE6BDPPRxr6b6P8I8F+6H3t+LIyPz8K3eYyD9/q2uUVT1osBcs
nQmRIPrapxzyHNG/Nl1jidaaoiGQTWRXhEIYFp+/q/cgeqLlEaplYvM01JQ4
mI/f9EGmuflCaFULjMM8eau+UTFV+XGRIreNKnlyzTuhgxVwGuTYH5wWS321
Y5SdXZIdtoKbmU5n5GBf5mkO1d/XwV9BDfyWz4UcDpWvdekZeKR8STT/lAnO
Z3Vej69SR8+OnLSQ+3fg7NciGGesg2NsfQWeo/tR1LOhoUgoAjlvi67Ob9UB
Z4PrU754Y4hybklpYYrA1xZbl0aqIaru36l4cAEoj6j64SEcAzkvndsRN6yh
VTIwKHNUDktsnZFmEYnoorgdSOr0xsPuvIvi5lyo93+7uYwtA/VauU4d/d4Q
2K75SSzpF0m8iJ509WQOTPQ06g7vqcWZXEFv3v0MEGTbruIbUYRHElJx9qfG
8HJMQC+JYQPUtyze9xsrhexT28/nx77CL+r7Hd9pPpgUMqWVVJWDMuQfITtH
9BC1AwkD0ttQwODttqG0An1x0m/fDNEgHva+ZnJIGKHeQur+5hT8KYwcGrCg
g1P/RlWivii8bIwNg4opGKB/HPe8Q0eH71uStq4YauycXHlWic8n7D3WWUGH
wpeI48t/xTC+RjGTSZHwyc3FrZm9dMTtTmuxIPrgDq+Ff8H7KxGk5lrSRviq
ma1Oil9bAuN76u2+mFSCDyp1/4h8dbu2ifnPKvG7xduc5xCrRMrakzdNugkf
rjHlH3irTr3r48cv+owC0mZlsxuZdPSfvV2b2+cHaU8FRxn+CnC3V0x6VdHB
xESP51+JobqRJcey9AowvLd2i3bOOJa4qz6PJOaj+2F/f3/ZHZy5u7RNo3AG
zfphv/wS/PFnU6qcRkArhgWLlvI/z4C9zYPF5GcAysV+f7DNb0VfbvmuMo8Z
FBv/OUne6Ie7GbIhEtqt4DWhiEqMTsOf1Kh2XtkDx4MNFHXmmvHLyf97ZPVn
XByYUUi4eQoc2Cw/86IRrzTv6jR/H8Ef98fTcmessJu3oHZYth5l7T9gKfEW
FtY3ul4+10eTxyL/2K1a2DMetTgX84Y453r6kKWHnLmFq7GkWvAOJh8qcx1G
3Z8THziljaEpf4TnbGAdHG/2Ok64TsHYY2t4VrELslv5CpMLm0Dty39kEUPD
pclkN87KEJzxqWNaON6Or9xy9VVEnmkOTesN4gnH7O8HHvIbO7C0X9Tr6iMa
jjmKcjQ+IENFZETsGNGn7mdWeT4gPHC17eUZQcInquQ/R2mEH7gfqo7wEj4p
3dyfRCG4Am0iQ47wicNgdjAPwRt4T+x4TPDp3dn80gRPiAjqZyQ4udsi5g/h
n9ciI2s4CK6RtHl3M7G+wGhTQxXhn/Uaa9vSifUDc2y+TxH5x2JB4OqOIjKE
l/YtbCD8s2HW5tqxBzR0Z6u8Wg0nI4Ml00mWsQPM2xW6tAl/OkXEavBtJKNe
h+FnGuGZ1m0xFZN9NCxduhZTbx2GcQbrKo3RdjwzCzjE4PIVYvNnYlW++4Il
mr1q56ZWnDJ9tet6QB0GokIVfPZxUEkMbAtanBS4nmbTsGVKoBYuF8nnn2BE
Y2GP2JmIHPC98t58UDEYByabOA1+cuPUw3Oq5mcysGaHeHpImAlO2fOtf5Wg
DgE6cy7LwzuwjxDd4t6mC9nNw/uqzQxg7anHIUjkGdtbHjybOfVxweH5cs9X
XbDbLa6uEYuCg9Ox4zlupjhK+1bNeFkduxUMvNUX7kDluI577IGjiNq6pTj3
sDgOV18pFMddqNhVmJytcsfBSoXX1+rWQicub5iVnAGFSPcfSwVB4KyixJyW
WSQNcDCYTni8hPHReRP27Ge4s8SQ7fnrF6m8IuzqPd9CfOgSdMt98gbae3fb
yuWwQmI80NvrZgmU6Bt2TEp/Rhy7wZF9ldxwObTdb96/DKEZZ7H58zSqLubO
izlsxgYhU8rFeCLnb5rdov9lBgyTw9fif25B8b+VUy+MKxDZe+zzKTYa8vnN
T/f82AqdFF2Z9p4KuEd35FPKaOj8tVBimyMEKqcTlUOPAqEW2melHXQ4VVbd
C80Ugf+R568jnlAQGlDjvTOYDhUkB797Lwp5k6hky2UKuFR/jjqX0TFqpciy
+kkMJ36vU3uzsxKZ77dasbwlep8oVeDrB3GQ6eWj600r4dKlNNdI9LgTJ72P
nl4vj6n0PSbpMkTvK9SNj+mhY/N3m7bN3Huo/+7q0iJzKfhlPvHlI8FX9Bit
9M0uwb7zB/OhN+Xoq9uns9+RBupnS9ONF32pm5b3nGa6nQPj1BTH9b9niTmW
f7qcdANbZM+9fcnQDq8H8/4fl2fB9PnEZunnN3BR58dtfZZ2uF9lzB4sncWP
1xsb8kSC0Zvhdm3haRsUtFTKTH7MwJH5WK6fTyCUrCa099S3Qo3O+I1L4yse
XNaWvnjFE2RW83Zt9RZYy0aqJDhMwdvb0FKYzRka5o6HE7yasOuypeLD2QnI
/GhaHK13wJnx8IvSFo2I2EX2+9s+gXEbfik3TwfcYjHhDNzXiHvbBkx+y35B
nuT2pV2iLrhnZyolO0TksUOM1akBs/hoyZz1bPd1jCVwFv1FG5L/7jm8PYmG
94J5Zfl+ZJjPPLtgROQE9au6Wd7E/O5Wsgs4ReSK74MbjlFYOzDh+fSyIeGB
540fn6wrJ6NzYWPAIjHvnjnS4RyEN6TZnlEeET6p1C/pFCW8cfxU7R9+gm/d
oPN8kODkEa2vygQ3vbv33//+8UtrmssmuMxR5eX//ZPqVvbtH7E+37jH0RnC
P9y8fLH/5yWPbTJragiebGP46zLhn7yI+Nk4wj9KV2cyEwj/aElFn5vLI/IS
x8/z/uwd0HU8de5zGg0Bz48+Oh9ARs1QSlzY33b4hYqtWlymwUCySSuUnYzt
2TEx3z8QOcd8csGthYYyGVOzD7fDEHO42XXXRDukQ8hSFSNf4TZz8l6pkD96
STFc8datuPRKTSzUtQE+cg9PqM7UkPziQgSz0ijwzD2g9OF0EvXZ9cLrry/9
IlXHMm/rq8nBlNcTpaRdNyCVu7WtcvdGDIrYXP9aloHtmW9kJkpNMZp2brFn
Vg04IuhWLBGHagOfn4dH9dHQ0fbIx08HUdlBlJaRKHyu+kdPnzKC9bqBOmEB
LQyHGkzWhMRCrp9+//hPS8ywjbcPuSjgUdQ7Z9ATiBykl7wsfQKOFmus7Ti2
ItzYocq16x50g13G5B+4gls5pMbGcQ3+KrprPXnyGFSVhgeHaNeRLTz0kXXh
BwnrNtlNir7Ew3avaV2mFAQxnL8kzbNAGqJ1S4aVFGD/BR4BTqd6VEsduxug
8o/0fEhv//XDxWi6PhWwkDaE9pHE66l87DBvSj/Iq1qKrPmL34qzx5FOSf1k
usSF2KIIp8f6ZfBb3ZfWyDqF2sKGb1838qCe9epQy1wZ4vwsVLwUp5Few3vh
0oFNKD/2BT3e5VCbebZwvP8rop+tE3JO5UP3r5Fw57lyiK6re/VRexZCKib9
oXYCiFq2TN/mU4Gijk3sdSdp+DYlRLdt2Ya8sz5xiRwUZD1NLx0UocPv6Jek
HDMRGLUe3nU0lYLHrTLjZ4h8Jax/wCphnRh6nxxTquOoxOI6la3mbXQMnugQ
e/xcHHLXqq24SJWwflxvoU3kqLUrqpoLnfKYvxnsc1GiEucujvG1/e+xeXr/
jTFx6sOJQR+dfArqBndPxSTQ8c/s+w9W93Mo+fX+5E/pMtwSVrPMOUuD8oax
4Kwnoajk/KpUnNmOkzfLjxfaETlB78Ij4xOh+EtZe6c+sR0dnO5qNmrEfP3e
m2uy5SYmzWPYGw61I9XXelW/eRZBSna/C92D8cD63aOSyjZ8n3iqJDYzgxP9
/XPnTQIxGGn4KqayFfpaS/s0S7/izcrddNlb3uB3HX/bldaCNV5jplpN00jQ
13iuwemBirgnP/ZNNMOfYojnq9MQKDlPCTzngdVLobRCphY09HrDoWkG1EP3
D9vYB6C2NeqdVWIrIhOPzQqdoOH4RYUnHsT335i4U/tGcjs2vh0yayXmN/Sf
cr7VOzI2K19r/bC+A9fuGB4xI7hkrjJjGjHXmcwSzBLEXFPlcvI/Ex74pRcw
NkT4Qb72MMMvwgMqx+tztxA+OddW/OgT4ZPnulrGqoQ3lJ6pPf6fR119XzZC
8D2Li50qBC976Ob2v3/e9J3YkEHwXVVdbVIEV7Ghjvx//yOtzSdeT6zvpVlg
9v/9j/3Pq3qFBJ/8Qr0/SyFy1JdgjgCCFwZljo8TeWx696C40DMyJOfLPbXW
dCDntEWf9T0aZoPzjNldyQhoU2epWGmHyI8aSqUvDR0iAty8XGRMkR8fjiRy
zo9cwaCsehrslrwdamvCIO7sMGs4Q/hqlnvTfpkZuL46+Z5zzh9VQzU8T4Nb
4cz4mFJb0Yi45tq3n6WZsRj3s/IHcyU6H/i5BVOSqdv5oz93c8yRNALOT4er
5UK5KS1uDX8IIocT1sZpcsPI5WCvdcxjXA2uPm+6YoZsq5vfkvapgOmGgHS8
bDy+uf56b3rDCEysHzIDO7VgMs4+waYbiwa3vHa/FwcgnMVUX6auBgcTj91X
W+Kg283OUrzmCIbT2yZOvBdD/IAYf9yJu+hw+/eR+ZwD6g6L3bLq5sHu7dFe
f+jpaLQNvPDZzw27+JOjgyeZYPqHK6ZGOQtB+HhKnu0Khi3TFG1DF0j9Yk82
nzF8CQmrZy8m98QiknPT1eWdc6QtdpdeW6kU4Eyl30hGVwGKmQRO6vn+InVc
mN3MeqIIIhwf1i+7tMMg81a+egIjplTW39rHXIID7mP+j9wGENlUPRYDNpCH
TKK9lkrQ6sbzmyn3A94eeCNqfYAD3MZS8ZZBpaBou+dOcHyCQaXwhzNZa3HS
fkm2YbQUNuoOJ6dkxmG1IHWJW4kLvr+3/rhNKsMG8qkZtprPiNUKmIv4yo3+
l/wSeZQyRH22YTry4QtSy1y3l7/mRYmIyMiuc+VodXh8cbZ5BuF3cjvcBLag
+ci8VY1+BUzujAzpPaRhPtGXk8V/O0SefP2jKUfB09ml61qedLwVfrXW3EwU
ktrfjgcOE72vlq39RD0dx68cPDxpJQ63806Dh3dUYl7ksNXqBzoWumclfqwX
x6GQXmFnkUri7xZ1MuExUaa+QcXWHdDKrbnmwUZBtdXJ+sRIGkRWU+bvToTB
fst9jnNj7UgU+/LeMYSGoUGL5M2xYTDK8I661tsOPkc9m0fONMRbx1tcfxSK
dRcuuxoSvtr0LAsfJGkwvlv5+2NBCMrPUrL3k9pRORRvkP98Frr1KdNR74Ng
FeH1/ExyG/b3Sxd6cM4iW+kv/cqxK+CdZ9Hm+tiKs+N662PvzWCbcaDrGx9/
3JL92hV9qRX2k3aqM0RevTGyIsd6OhDuDkGnpl614nTpgLfryizGFil+FvQb
2KPjKje8vh1Bu4SudqTQYHOCa1HLkQw39uFS62Xi+8gZrvITc333TnteaxUZ
0XMGNdLEXG8Z9egMIniksxSfKDHvT76YyxgRnMM/vel/b7hb849VEN6w5tte
Jkt4YzEz116Q4Pf8/irNEVx+nS27OsFrhw/d/N8/P/Np7P/7h54YnPe/f8rX
kZL+v/8R3J57Pobgiolf/MUJXu316ulP4rn8xhEJYYR/qgxmDBeI5/JpzQmE
Elw45ke7bAUZYi/rrWUI7mHkmpRG7JMzx+yRmEYGzy1/g3miD+4SsDQySqXh
0UMP/mQHMhzsVP91/27H/INdnhcCaFB9GfOAIkIGE/eGcc3xdoxGB9vmN9Cg
bbjFV3suDOSTk5rHFtphPqysbLZ/BrfbtVx32gWgimNXfibh88Zk2WL1M014
v/pqZSyYE16G/QG1qETMTHhbI9ddqnRAb4qP2AzJ0ICHlDOQC+2b/GzfBkMg
vc+lM9h2HZzWvw6qX5OF+5sDdvbwWqF/PvPybJQ8FNlNlxn/JOCW0QLNSMYU
bzpVWIzk1KFfdra8kzkOvW8fDIUFWyG7rM0iukAOJOs+1fTURDDuamAMdLZB
unMI52NWAch/e3f1pF8aRsqDle/uPAO7RlKXoSYndvSqCNMdMnCFY0V40O4i
2BgXswo7/5DSzBSEBYSzsWWE2YnW6I8uhx2+7xrnSaQTjlUlr19CcnRr28tI
Mry1KrNjS2ZJpE3aBycG8tH7ax2j+INH8PkiGhRm8Z1UEyTnOxJeiDPyWad6
iDmeWPqgarvwm2Q8/MrMb6oI7uqHEsSVm2AS+H7c7tc/0jHhQXnvkmLEXibl
dwt24Jm2/2rzbUawJxkM8vKU4LlWkllEWhcmX3Vb/3ZjQoXv12xVvRKkK7Zk
WFX0gF4xlzRpw4y/DmnlDt4lIP3mUwhR6UcXT/D9xyys8KuYDOJqLkHRZ208
bxnGAf37eYH72FEmpyX19VgpCvJUvniJjOONzQWPe+pccNyN3BLCYzV/zwqk
vvuCxQPm33jZN+HQ5T5Xv0vlWPYZ9A1IncVBtrgE7xeCcI396RFRUAEvc7fR
Q3J0BPJoXJZPEUFg/Xub1iwKzuff0XueT8fcFp2Jgz1ieLf6Xue1QCWiixJP
nH9Dx/dDwfdaaRIIi5K/VvOBgv8AIzU81g==
    "], {{0, 48}, {48, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{48., Automatic},
  ImageSizeRaw->{48, 48},
  PlotRange->{{0, 48}, {0, 48}}]], "Output",
 CellChangeTimes->{{3.6879749406334343`*^9, 3.6879749655469723`*^9}, 
   3.6879750334970818`*^9, 3.6879752215104036`*^9, 3.687975295726674*^9, 
   3.6879754460484667`*^9, 3.687975481316881*^9, {3.687977091703967*^9, 
   3.687977117751259*^9}, {3.6879850507748404`*^9, 3.687985098273374*^9}, 
   3.6879855983749447`*^9}]
}, Open  ]]
},
WindowSize->{752, 823},
WindowMargins->{{Automatic, 390}, {65, Automatic}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (September 21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 37570, 899, 278, "Input"],
Cell[38153, 923, 64656, 1064, 63, "Output"]
}, Open  ]]
}
]
*)

